// <auto-generated />
using DemoApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DemoApi.Migrations
{
    [DbContext(typeof(DemoAppDbContext))]
    [Migration("20180329132957_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DemoApi.Data.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBySub");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(128);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("LastModifiedBySub");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<string>("OwnerSub");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("CreatedBySub");

                    b.HasIndex("LastModifiedBySub");

                    b.HasIndex("OwnerSub");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DemoApi.Data.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BlogId");

                    b.Property<string>("Body");

                    b.Property<string>("CreatedBySub");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastModifiedBySub");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<int?>("ParentMessageId");

                    b.Property<int?>("PublicationId");

                    b.Property<string>("SenderSub");

                    b.Property<string>("Subject")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("CreatedBySub");

                    b.HasIndex("LastModifiedBySub");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("SenderSub");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DemoApi.Data.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorSub");

                    b.Property<int>("BlogId");

                    b.Property<string>("Body");

                    b.Property<string>("CreatedBySub");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("LastModifiedBySub");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<string>("Title")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("AuthorSub");

                    b.HasIndex("BlogId");

                    b.HasIndex("CreatedBySub");

                    b.HasIndex("LastModifiedBySub");

                    b.ToTable("Publications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Publication");
                });

            modelBuilder.Entity("DemoApi.Data.UserProfile", b =>
                {
                    b.Property<string>("Sub")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(64);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024);

                    b.HasKey("Sub");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DemoApi.Data.Page", b =>
                {
                    b.HasBaseType("DemoApi.Data.Publication");


                    b.ToTable("Pages");

                    b.HasDiscriminator().HasValue("Page");
                });

            modelBuilder.Entity("DemoApi.Data.Post", b =>
                {
                    b.HasBaseType("DemoApi.Data.Publication");


                    b.ToTable("Posts");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("DemoApi.Data.Blog", b =>
                {
                    b.HasOne("DemoApi.Data.UserProfile")
                        .WithMany()
                        .HasForeignKey("CreatedBySub")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.UserProfile")
                        .WithMany()
                        .HasForeignKey("LastModifiedBySub")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.UserProfile", "OwnerProfile")
                        .WithMany("OwnedBlogs")
                        .HasForeignKey("OwnerSub")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DemoApi.Data.Message", b =>
                {
                    b.HasOne("DemoApi.Data.Blog", "Blog")
                        .WithMany("Messages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.UserProfile")
                        .WithMany()
                        .HasForeignKey("CreatedBySub")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.UserProfile")
                        .WithMany()
                        .HasForeignKey("LastModifiedBySub")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.Message", "ParentMessage")
                        .WithMany("ChildMessages")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.Publication", "Publication")
                        .WithMany("Messages")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.UserProfile", "SenderProfile")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderSub")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DemoApi.Data.Publication", b =>
                {
                    b.HasOne("DemoApi.Data.UserProfile", "AuthorProfile")
                        .WithMany("Publications")
                        .HasForeignKey("AuthorSub")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.Blog", "Blog")
                        .WithMany("Publications")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.UserProfile")
                        .WithMany()
                        .HasForeignKey("CreatedBySub")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoApi.Data.UserProfile")
                        .WithMany()
                        .HasForeignKey("LastModifiedBySub")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
